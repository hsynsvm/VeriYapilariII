@startuml LinkedList
title LinkedList
namespace DataStructures.LinkedList.Singly {
    class SinglyLinkedListNode<T> {
        +Value: T?
        +Next: SinglyLinkedListNode<T>?
        +SinglyLinkedListNode()
        +SinglyLinkedListNode(value: T)
        +ToString(): string
    }

    class SinglyLinkedListEnumerator<T> {
        - Head: SinglyLinkedListNode<T>?
        - Curr: SinglyLinkedListNode<T>?
        + SinglyLinkedListEnumerator(head: SinglyLinkedListNode<T>)
        + Current: T
        + MoveNext(): bool
        + Reset(): void
        + Dispose(): void
    }

    class SinglyLinkedList<T> {
        -_count: int
        +Head: SinglyLinkedListNode<T>?
        +SinglyLinkedList()
        +SinglyLinkedList(collection: IEnumerable<T>)
        +AddAfter(node: SinglyLinkedListNode<T>, item: T): void
        +AddBefore(node: SinglyLinkedListNode<T>, item: T): void
        +AddFirst(item: T): void
        +AddLast(item: T): void
        +Remove(node: SinglyLinkedListNode<T>): T
        +RemoveFirst(): T
        +RemoveLast(): T
        +Count: int
    }
   
}

namespace DataStructures.LinkedList.Contracts {
    interface ISinglyLinkedList<T> {
    +Head: SinglyLinkedListNode<T>?
    +Count: int
    +AddFirst(item: T): void
    +AddLast(item: T): void
    +AddBefore(node: SinglyLinkedListNode<T>, item: T): void
    +AddAfter(node: SinglyLinkedListNode<T>, item: T): void
    +RemoveFirst(): T
    +RemoveLast(): T
    +Remove(node: SinglyLinkedListNode<T>): T
    }
  
}

namespace System.Collections.Generic {
    interface IEnumerable<T> {
        +GetEnumerator():IEnumerator<T>
    }
    
    interface IEnumerator<T> {
        +Current:T
        +MoveNext():bool
        +Reset():void
    }
    
    interface IDisposable {
        +Dispose():void
    }
}

DataStructures.LinkedList.Singly.SinglyLinkedList .up.|> DataStructures.LinkedList.Contracts.ISinglyLinkedList : "<<implements>>"
DataStructures.LinkedList.Singly.SinglyLinkedList o-- DataStructures.LinkedList.Singly.SinglyLinkedListNode : "use-a"
DataStructures.LinkedList.Singly.SinglyLinkedList o-- DataStructures.LinkedList.Singly.SinglyLinkedListEnumerator : "use-a"
DataStructures.LinkedList.Singly.SinglyLinkedList .up.|> System.Collections.Generic.IEnumerable : "<<implements>>"

System.Collections.Generic.IEnumerable - System.Collections.Generic.IEnumerator : "use-a"
System.Collections.Generic.IEnumerable .up.|> System.Collections.Generic.IDisposable : "<<implements>>"

hide empty members
@enduml
